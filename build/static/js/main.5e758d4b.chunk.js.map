{"version":3,"sources":["components/Form.js","components/ProfileDetails.js","components/SortedList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","Row","className","onSubmit","event","handleUserFormSubmit","name","type","placeholder","required","value","formData","username","onChange","handleFormChange","imgStye","borderRadius","width","height","ProfileDetails","Col","xs","md","infoclean","avatar_url","src","alt","style","html_url","href","target","created_at","from","Date","bio","blog","search","location","company","public_repos","followers","following","public_gists","login","maxWidth","maxHeight","SortedList","repitems","map","repitem","key","id","description","language","watchers_count","forks_count","App","state","gitun","staritems","bind","preventDefault","axios","get","this","then","response","setState","data","catch","err","console","log","filter","fork","sort","b","a","slice","obj","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5e758d4b.chunk.js","sourcesContent":["import React from 'react';\nimport { Row} from 'react-bootstrap';\n\n\n\nconst Form = (props) => {\n  return (\n    <Row className=\"show-grid\" className=\"text-center\">\n    <form onSubmit={(event) => props.handleUserFormSubmit(event)}>\n        Username:<span>   </span>\n        <label>\n          <input\n            className=\"form-control\"\n            name=\"username\"\n            type=\"text\"\n            placeholder=\"Enter username\"\n            required\n            value={props.formData.username}\n            onChange={props.handleFormChange}\n          />\n        </label>\n        <span>   </span>\n          <input\n            type=\"submit\"\n            value=\"Compare\"\n            className=\"btn btn-primary\"\n          />\n\n    </form>\n    </Row>\n  )};\n\nexport default Form;","import React from 'react';\nimport Moment from 'react-moment';\n\nimport { Row, Col } from 'react-bootstrap';\n\nconst imgStye = {\n  borderRadius: \"50%\",\n  width: \"250px\",\n  height: \"250px\"\n};\n\n\nconst ProfileDetails = (props) => {\n    return (\n        <Row className=\"show-grid\">\n          <Col xs={12} md={4} className=\"text-center\">\n            <div>\n              {props.infoclean.avatar_url ?\n                <img src={props.infoclean.avatar_url}\n                     alt=\"Profile\"\n                     style={imgStye}/> : null }\n            </div>\n            <br/>\n            <div>\n              {props.infoclean.html_url ? <div><p><a className=\"btn btn-info\" href={props.infoclean.html_url} target=\"_blank\">View on GitHub</a></p></div> : null }\n            </div>\n          </Col>\n          <Col xs={12} md={8}>\n            <Col xs={12} md={8}>\n              <div>\n                {props.infoclean.name ? <div><p><b>Name: </b>{props.infoclean.name}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={12} md={4}>\n              <div>\n                {props.infoclean.created_at ? <div><p><b>Joined: </b>{\n                <Moment from={new Date()}>{props.infoclean.created_at}</Moment>}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={12}>\n              <div>\n                {props.infoclean.bio ? <div><p><b>Bio:  </b>{props.infoclean.bio}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={12}>\n              <div>\n                {props.infoclean.blog ? <div><p><b>Blog: </b><a href={\n                   props.infoclean.blog.search(\"http\") !== -1 ? props.infoclean.blog\n                  : \"http://\" +  props.infoclean.blog } target=\"_blank\">{props.infoclean.blog}</a></p></div> : null }\n              </div>\n            </Col>\n            <Col xs={12}>\n              <div>\n                {props.infoclean.location ? <div><p><b>Location: </b>{props.infoclean.location}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={12}>\n              <div>\n                {props.infoclean.company ? <div><p><b>Company: </b>{props.infoclean.company}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={4} className=\"text-center\">\n              <div>\n                {props.infoclean.public_repos ? <div><p><b>Public Repos:</b></p><p>{props.infoclean.public_repos}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={4} className=\"text-center\">\n              <div>\n                {props.infoclean.followers ? <div><p><b>Followers: </b></p><p>{props.infoclean.followers}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={4} className=\"text-center\">\n              <div>\n                {props.infoclean.following ? <div><p><b>Following: </b></p><p>{props.infoclean.following}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={4} className=\"text-center\">\n              <div>\n                {props.infoclean.following ? <div><p><b>Public Gists: </b></p><p>{props.infoclean.public_gists}</p></div> : null }\n              </div>\n            </Col>\n            <Col xs={12} className=\"text-center\">\n              <div>\n                {props.infoclean.login ? <div>{ <img src={\"http://ghchart.rshah.org/\"+props.infoclean.login} alt=\"Github chart\" style={{ maxWidth: '100%', maxHeight: '100%'}}/>\n              }<br/><a href=\"https://ghchart.rshah.org/\" target=\"_blank\">Source for GitHub Chart API</a></div> : null }\n              </div>\n            </Col>\n          </Col>\n        </Row>\n    )\n\n  };\n\nexport default ProfileDetails;","import React from 'react';\nimport Moment from 'react-moment'; const SortedList = (props) => {\n    if (props.repitems) {\n        return (\n            <ul>\n                {props.repitems.map((repitem) =>\n                    <li key={repitem.id}>\n                        <div>\n                            <div>\n                                <a href={repitem.html_url} target=\"_blank\">{repitem.name}</a> || Started <Moment from={new Date()}>{repitem.created_at}</Moment>\n                            </div>\n                            <div>\n                                <i>{repitem.description}</i>\n                            </div>\n                            <div>\n                                Language: {repitem.language} || Watchers: {repitem.watchers_count} || Forks: {repitem.forks_count}\n                            </div>\n                        </div>\n                    </li>\n                )}\n            </ul>\n        )\n    } else { return null; }\n}; export default SortedList;","\n\nimport React, { Component } from 'react';\nimport axios from 'axios'; import Form from './components/Form.js';\nimport ProfileDetails from './components/ProfileDetails.js'; \nimport SortedList from './components/SortedList';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gitun: 'No username',\n      infoclean: '',\n      formData: {\n        username: '',\n      },\n      repitems: null,\n      staritems: null,\n    }\n    this.handleUserFormSubmit = this.handleUserFormSubmit.bind(this);\n    this.handleFormChange = this.handleFormChange.bind(this);\n  } handleUserFormSubmit(event) {\n    event.preventDefault();\n    axios.get('https://api.github.com/users/' + this.state.formData.username)\n      .then(response => this.setState({\n        gitun: response.data.login,\n        infoclean: response.data,\n      })).catch((err) => { console.log(err); });\n    \n    \n      axios.get('https://api.github.com/users/' + this.state.formData.username + '/repos')\n      .then(response =>\n        this.setState({\n          repitems : response.data\n          .filter(({fork}) => fork === false)\n          .sort((b,a) => \n          (a.watchers_count + a.forks_count)-\n          (b.watchers_count + b.forks_count)).slice(0, 10)\n        })).catch((err) => {\n          console.log(err);\n        });\n\n      axios.get('https://api.github.com/users/' + this.state.formData.username + '/starred')\n      .then(response => \n        this.setState({\n          staritems : response.data\n          .filter(({fork}) => fork ===false)\n          .sort((b, a) =>\n          (a.watchers_count + a.forks_count) -\n          (b.watchers_count + b.forks_count)).slice(0, 10)\n        })).catch((err) => {\n          console.log(err);\n        });\n      };\n      \n     handleFormChange(event) {\n    const obj = this.state.formData;\n    obj[event.target.name] = event.target.value;\n    this.setState(obj);\n  }; \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">GitHubCompare</h1>\n        </header>\n        <p className=\"App-intro\">\n        \n        </p>\n        <hr></hr>\n        <Form\n          formData={this.state.formData}\n          handleUserFormSubmit={this.handleUserFormSubmit}\n          handleFormChange={this.handleFormChange}\n        />\n        <hr></hr>\n        Profile Details:\n        <ProfileDetails infoclean={this.state.infoclean} />\n        <hr></hr>\n        Own Repositories :\n        <SortedList repitems = {this.state.repitems}/>\n        <hr></hr>\n        Starred Repositories :\n        <SortedList repitems = {this.state.staritems}/>\n        </div>\n    );\n  }\n} \nexport default App;\n\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}